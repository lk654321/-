 `git` 官方名称： **分布式版本管理器**  作者：liuux
私人解释： 就是一个管理我们文件夹的工具
 源代码管理：svn(集中式) 
安好以后：点击右键，git bash here 打开
然后用这个软件来管理我们的一个文件夹，这个文件夹被 `git` 管理以后，我们可以对他进行各种操作，保证我们写过的内容不会丢失
                                            .git目录保存的是完整的版本库
githup一个远程服务器，用来保存git上传的文件

配置用户名和邮箱(只需要配置一次)
  git config --global user.name "Your Name"
 git config --global user.email "email@example.com"
 #查看配置信息
 git config -l 

1、新建文件夹tb，在git终端中打开，进行初始化  $ git init
      会自己见一个.git 文件夹（隐藏的），
然后这个文件夹tb就被管理了，包括里面所有的子文件夹和子文件

2、git` 就会对当前文件夹进行 **“分区”**
      1. 工作区：我们书写的源码就在工作区里面属性
      2. 暂存区：把我们想要存储的内容放在暂存区
      3. 历史区：把暂存区里面的内容拿出来形成一个历史版本

     - 要先放在暂存区
    - 然后才能在暂存区里面放到历史去
     - 才可以生成一个版本保存下来
3、  命令： git add index.html    把index文件放到暂存区
                取消命令： git reset HEAD --index.html 
                                   git reset HEAD -- .   拉回所有文件
4、  历史区  ：- 向历史区里面添加内容的时候，必须保证 **暂存区** 有内容                                     - 因为历史区就是把暂存区里面的内容收录进去
                    - 向历史区添加内容使用 `git commit -m "做一个简单的说明"`’
               我们一定要写一个简单的说明，因为我们历史版本太多，不容易记住
                    命令： git log  查看当前历史区版本信息
  `commit`：这一个版本的版本编号  `Author`：作者     `Date`：本次版本的记录时间
          如果我们把文件删了，工作区中的内容给删除了，删除以后我们进行历史回退
        我们使用 `git reset --hard 版本编号` 进行历史回退
          回退到第一次提交的版本
         $ git reset --hard  ce0c17f7a703

            命令：  git reflog  能查看所有的历史记录，查看版本编号
                        git diff  查看修改了那些文件  暂存区与工作区的代码差异

 注册 git ee             账号：刘康  // liu_kangaa 或邮箱名、密码：123abc


 git 分支
  `git` 分支，就是我们自己把我们的整个文件夹分成一个一个独立的区域
`  git` 在初始化的时候，会自动生成一个分支，叫做 `master`    表示主分支的意思
         命令： git branch list     开辟新建list 分支
                    git checkout list    切换 分支到list
                   git merge master    合并分支 到master   先切换到主分支在合并其他分支                git  branch -d list     删除分支  list 
                   
                    git branch  列出本地所有分支
   `git` 的合并分支，只能是把别的分支的内容合并到自己的分支上

                 在gitee上新建一个仓库       远程服务器
       第一次# 上传内容：    $ 

       第二次 直接：  git push  推上去

      git clone   克隆
     git pull      拉取 远程最新代码  拉下来

- `git` 冲突是指在我们的上传过程中
- 本地的版本和远程的版本不一致导致的
- 这个时候只要先使用 `git pull` 拉取回来
  - 让本地和远程保持一致
- 然后再从新上传就好了


   

 